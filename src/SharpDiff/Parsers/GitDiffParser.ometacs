using System.Collections.Generic;
using System.Linq;
using SharpDiff.FileStructure;
using OMetaSharp;

ometa SharpDiff.Parsers.GitDiffParser : Parser {
	Diffs			= ((NewLine | Empty) Diff)+:diffs						-> { diffs },
	Diff			= DiffHeader:diffHeader NewLine Headers:headers Chunks:chunks
																			-> { new Diff(diffHeader.As<DiffHeader>(), headers.ToIEnumerable<IHeader>(), chunks.ToIEnumerable<Chunk>()) }
					| DiffHeader:diffHeader NewLine Headers:headers BinaryFiles:binaryFiles
																			-> { new Diff(diffHeader.As<DiffHeader>(), headers.ToIEnumerable<IHeader>(), binaryFiles.As<BinaryFiles>()) },
																			
	DiffHeader		= "diff" Space FormatType:format Text:rawFileDefs		-> { new DiffHeader(format.As<FormatType>(), rawFileDefs.As<string>()) }
					| "diff" Space FormatType:format						-> { new DiffHeader(format.As<FormatType>(), (string)null) },

	Headers				= Header_*:headers									-> { headers },
	Header_				= Header:header NewLine								-> { header },
	Header				= ModeHeader
						| CopyRenameHeader
						| SimilarityHeader
						| IndexHeader,
	ModeHeader			= ("old file"|"new file"|"deleted file"|"old"|"new"|"deleted"):kind Space "mode" Space Number:mode
																			-> { new ModeHeader(kind.As<string>(), mode.As<int>()) },
	CopyRenameHeader	= ("copy"|"rename"):transaction Space ("from"|"to"):direction Space Text:filename
																			-> { new CopyRenameHeader(transaction.As<string>(), direction.As<string>(), filename.As<string>()) },
	SimilarityHeader	= ("similarity"|"dissimilarity"):kind Space "index" Space Number:index "%"
																			-> { new SimilarityHeader(kind.As<string>(), index.As<int>()) },
	IndexHeader			= "index" Space HashRange:range Space Number:mode	-> { new IndexHeader(range.As<HashRange>(), mode.As<int>()) }
						| "index" Space HashRange:range						-> { new IndexHeader(range.As<HashRange>(), null) },
	
	BinaryFiles		= "Binary files" Text:raw (NewLine | Empty)				-> { new BinaryFiles(raw.As<string>()) },
	Chunks			= (ChunkHeader NewLine | Empty) Chunk+:chunks			-> { chunks },
	Chunk			= ChunkRange:range Snippet+:snippets (NewLine | Empty)	-> { new Chunk(range.As<ChunkRange>(), snippets.ToIEnumerable<ISnippet>()) }
					| ChunkRange:range (NewLine | Empty)					-> { new Chunk(range.As<ChunkRange>(), new List<ISnippet>()) },
	
	ChunkHeader		= "---" Space FileDef:originalFile NewLine "+++" Space FileDef:newFile
																		-> { new ChunkHeader(originalFile.As<IFile>(), newFile.As<IFile>()) },
	ChunkRange		= "@@" Space ChangeRange:originalRange Space ChangeRange:newRange Space "@@" (Text | Empty -> { "" }):value (NewLine | Empty)
																		-> { new ChunkRange(originalRange.As<ChangeRange>(), newRange.As<ChangeRange>()) },
	ChangeRange		= ("+" | "-") Number:line "," Number:affected		-> { new ChangeRange(line.As<int>(), affected.As<int>()) }
					| ("+" | "-") Number:line							-> { new ChangeRange(line.As<int>(), 1) },
	
	Snippet				= ContextSnippet
						| ModificationSnippet
						| AdditionSnippet
						| SubtractionSnippet,
	ContextSnippet		= ContextLine+:lines NoNewLineAtEOFLine:eof		-> { new ContextSnippet(lines.ToIEnumerable<ILine>().Concat(new ILine[]{eof.As<ILine>()})) }
						| ContextLine+:lines							-> { new ContextSnippet(lines.ToIEnumerable<ILine>()) },
	AdditionSnippet		= AdditionLine+:lines NoNewLineAtEOFLine:eof	-> { new AdditionSnippet(lines.ToIEnumerable<ILine>().Concat(new ILine[]{eof.As<ILine>()})) }
						| AdditionLine+:lines							-> { new AdditionSnippet(lines.ToIEnumerable<ILine>()) },
	SubtractionSnippet	= SubtractionLine+:lines NoNewLineAtEOFLine:eof	-> { new SubtractionSnippet(lines.ToIEnumerable<ILine>().Concat(new ILine[]{eof.As<ILine>()})) }
						| SubtractionLine+:lines						-> { new SubtractionSnippet(lines.ToIEnumerable<ILine>()) },
	ModificationSnippet = SubtractionLine+:subtractions NoNewLineAtEOFLine:eof1 AdditionLine+:additions NoNewLineAtEOFLine:eof2
							-> { new ModificationSnippet(subtractions.ToIEnumerable<ILine>().Concat(new ILine[]{eof1.As<ILine>()}), additions.ToIEnumerable<ILine>().Concat(new ILine[]{eof2.As<ILine>()})) }
						| SubtractionLine+:subtractions NoNewLineAtEOFLine:eof AdditionLine+:additions
							-> { new ModificationSnippet(subtractions.ToIEnumerable<ILine>().Concat(new ILine[]{eof.As<ILine>()}), additions.ToIEnumerable<ILine>()) }
						| SubtractionLine+:subtractions AdditionLine+:additions NoNewLineAtEOFLine:eof
							-> { new ModificationSnippet(subtractions.ToIEnumerable<ILine>(), additions.ToIEnumerable<ILine>().Concat(new ILine[]{eof.As<ILine>()})) }
						| SubtractionLine+:subtractions AdditionLine+:additions
							-> { new ModificationSnippet(subtractions.ToIEnumerable<ILine>(), additions.ToIEnumerable<ILine>()) },
	
	DiffLines			= DiffLine+:lines -> { lines },
	DiffLine			= ContextLine
						| AdditionLine
						| SubtractionLine
						| NoNewLineAtEOFLine,
	ContextLine			= Space Line:value									-> { new ContextLine(value.As<string>()) },
	AdditionLine		= "+" Line:value									-> { new AdditionLine(value.As<string>()) },
	SubtractionLine		= "-" Line:value									-> { new SubtractionLine(value.As<string>()) },
	NoNewLineAtEOFLine	= '\\' Space "No newline at end of file" NewLine	-> { new NoNewLineAtEOFLine() }
						| '\\' Space "No newline at end of file"			-> { new NoNewLineAtEOFLine() },
	Line				= (Text | Empty -> { "" }):value NewLine			-> { value.As<string>() },
	
	FileDef			= Letter:letter "/" Text:filename					-> { new File(letter.As<char>(), filename.As<string>()) }
					| "/dev/null"										-> { new NullFile() },
	
	FormatType		= "--" LetterOrDigit+:format						-> { new FormatType(format.As<string>()) },
	
	HashRange		= LetterOrDigit+:first ".." LetterOrDigit+:second	-> { new HashRange(first.As<string>(), second.As<string>()) },
	
	Text			= (~NewLine Character)+,
	
	Number		   ^= Digit+:ds<string>									-> { int.Parse(ds) },
	
	NewLine			= '\r' '\n'
					| '\n'
}